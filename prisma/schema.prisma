// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





model Member{
  id Int @id @default(autoincrement())
  user_id Int
  name String @db.VarChar(191)
  email String @db.VarChar(191) @unique
  mobile String @db.VarChar(191) @unique
  address String @db.VarChar(191)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(references: [id],fields: [user_id])

 
 transactions Transaction[]
  @@map("members")

}

model User{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  mobile String @db.VarChar(15) @unique
  password String @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  members Member[]
  books Book[]
  transactions Transaction[]
  @@map("users")

}

model Book{
  id Int @id @default(autoincrement())
  user_id Int
  title String @db.VarChar(100)
  author String @db.VarChar(100)
  quantity Int?
  // book_img String?
  availability Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  user User @relation(references: [id],fields: [user_id])
  transactions Transaction[]
  @@map("books")
}

model Transaction{
  id Int @id @default(autoincrement())
  user_id Int
  book_id Int
  member_id Int
  transaction_date DateTime @default(now())
  type ReservationType @default(borrow)


  book Book @relation(references:[id], fields:[book_id])
  member Member @relation(references:[id],fields:[member_id])
  user User @relation(references:[id],fields: [user_id])

  @@map("transactions")

}

enum ReservationType{
  borrow
  return

}


